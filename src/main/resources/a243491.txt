//https://apps.dtic.mil/dtic/tr/fulltext/u2/a243491.pdf

DECLARE FUNCTION K! (T!, doughComponent!(), index!)
OPEN "A:AIR.DAT" FOR INPUT AS #1
OPEN "A:C02.DAT" FOR INPUT AS #2
double[][] AIR = new double[10][5];
double[][] C02 = new double[10][3];
for(int index = 0; index < 10; index ++)
	INPUT #1, AIR(index, 1), AIR(index, 2), AIR(index, 3), AIR(index, 4), AIR(index,5)
for(int index = 0; index < 10; index ++)
	INPUT #2, C02(index, 1), C02(index, 2), C02(index, 3)
CLOSE #1
CLOSE #2

100 CLS
110 SCREEN 9
120 COLOR 1, 7
130 CLS
140 LOCATE 1, 18
150 PRINT "MODEL FOR ESTIMATING COOKING TIMES FOR PIZZA"
160 LOCATE 5, 5
170 PRINT "This program is for estimating the cooking time for a pizza baked in a"
180 LOCATE 6, 5
190 PRINT "pan using oil. Because of assumptions made in the development of this"
200 LOCATE 7, 5
210 PRINT "program a new value for the diffusivity and conductivity of the crust"
220 LOCATE 8, 5
230 PRINT "must be calculated for any significant changes in cooking method."
240 LOCATE 1C, 5
250 PRINT "Use the arrow key to select desired program module."
260 LOCATE 12, 10
270 PRINT "( ) Determine the effective diffusivity and conductivity of the crust"
280 LOCATE 14, 10
290 PRINT "( ) Estimate new cooking time"
300 LOCATE 12, 11
310 PRINT "X"
330 SELECTS = INPUTS(1)
320 ROW = CSRLIN
340 IF ASC(RIGHT$(SELECT$, 1)) = 50 AND ROW 13 THEN
	342 LOCATE 12, 11Page - 57
	344 PRINT
	350 LOCATE 14, 11
	360 PRINT "X"
	370 GOTO 330
380 ELSEIF ASC(RIGHT$(SELECT$, 1)) = 56 AND ROW = 15THEN
	382 LOCATE 14, 11
	384 PRINT ""
	390 LOCATE 12, 11
	400 PRINT "X"
	410 GOTO 330
420 ELSEIF ASC(RIGHT$(SELECT$, 1)) = 13 THEN
	430 GOTO 470
440 ELSEIF ROW = 13 THEN
	450 LOCATE 13, 11
	460 GOTO 330
470 ELSE
	480 LOCATE 15, 11
	490 GOTO 330
500 END IF
510 IF ROW < 14 THEN
	520 GOTO 560
530 ELSE
	540 GOTO 10000
550 END IF
560 CLS
570 LOCATE 3, 25
580 PRINT "PARAMETER DETERMINATION MODULE"
590 VIEW PRINT 5 TO 25
600 LOCATE 5, 5
610 PRINT "COMPOSITIONS (in decimal form)"
620 LOCATE 7, 10
630 PRINT "DOUGH:"
640 LOCATE 8, 15
650 PRINT "PROTEIN: "
660 LOCATE 9, 15
670 PRINT "FAT: "
680 LOCATE 10, 15
690 PRINT "CARBOHYDRATE: "
700 LOCATE 11, 15
710 PRINT "FIBER:_ _
720 LOCATE 12, 15
730 PRINT "ASH: -
740 LOCATE 13, 15
750 PRINT "moisture: "
760 LOCATE 15, 10
770 PRINT "SAUCE:"
780 LOCATE 16, 15
790 PRINT "PROTEIN:_ _
800 LOCATE 17, 15
810 PRINT "FAT:_ _
820 LOCATE 18, 15
830 PRINT "CARBOHYDRATE:_ _
840 LOCATE 19, 15
850 PRINT "FIBER: "
860 LOCATE 20, 15
870 PRINT "ASH:_ _
880 LOCATE 21, 15
890 PRINT "moisture:
900 LOCATE 8, 23, 1, 0, 7
910 INPUT "", initialDoughProtein
920 LOCATE 8, 23
930 PRINT
940 LOCATE 8, 23
950 PRINT initialDoughProtein
960 LOCATE 9, 19, 1, 0, 7
970 INPUT "", initialDoughFat
980 LOCATE 9, 19
990 PRINT
1000 LOCATE 9, 19
1010 PRINT initialDoughFat
1020 LOCATE 10, 28, 1, 0, 7
1030 INPUT "", initialDoughCarbohydrate
1040 LOCATE 10, 28
1050 PRINT
1060 LOCATE 10, 28
1070 PRINT initialDoughCarbohydrate
1080 LOCATE 11, 21, 1, 0, 7
1090 INPUT "", initialDoughFiber
1100 LOCATE 11, 21
1110 PRINT
1120 LOCATE 11, 21
1130 PRINT initialDoughFiber
1140 LOCATE 12, 19, 1, 0, 7
1150 INPUT "", initialDoughAsh
1160 LOCATE 12, 19
1170 PRINT
1180 LOCATE 12, 19
1190 PRINT initialDoughAsh
1200 LOCATE 13, 24, 1, 0, 7
1210 INPUT '"', initialDoughMoisture
1220 LOCATE 13, 24
1230 PRINT ...
1240 LOCATE 13, 24
1250 PRINT initialDoughMoisture
1260 LOCATE 16, 23, 1, 0, 7
1270 INPUT "", ISPRO
1280 LOCATE 16, 23
1290 PRINT ...
1300 LOCATE 16, 23
1310 PRINT ISPRO
1320 LOCATE 17, 19, 1, 0, 7
1330 INPUT "", ISFAT
1340 LOCATE 17, 19
1350 PRINT .
1360 LOCATE 17, 19
1370 PRINT ISFAT
1380 LOCATE 18, 28, 1, 0, 7
1390 INPUT "", ISCARBO
1400 LOCATE 18, 28
1410 PRINT
1420 LOCATE 18, 28
1430 PRINT ISCARBO
1440 LOCATE 19, 21, 1, 0, 7
1450 INPUT "", ISFIBER
1460 LOCATE 19, 21
1470 PRINT
1480 LOCATE 19, 21
1490 PRINT ISFIBER
1500 LOCATE 20, 19, 1, 0, 7
1510 INPUT "", ISASH
1520 LOCATE 20, 19
1530 PRINT
1540 LOCATE 20, 19
1550 PRINT ISASH
1560 LOCATE 21, 24, 1, 0, 7
1570 INPUT "", initialTomatoMoistureContent
1580 LOCATE 21, 24
1590 PRINT
1600 LOCATE 21, 24
1610 PRINT initialTomatoMoistureContent
1620 -" 2
1630 LO( \TE 5, 5
1640 PRJ 'T "PREBAKING CONDITIONS"
1650 LOG,^FE 7, 10
1660 PRINT "WEIGHT OF RAW DOUGH (in grams):
1670 LOCATE 9, 10
1680 PRINT "WEIGHT OF SAUCE (in grams):
1690 LOCATE 11, 10
1700 PRINT "WEIGHT OF OIL IN PAN (in grams):
1710 LOCATE 13, 10
1720 PRINT "THICKNESS OF SHELL (inmillimeters): "
1721 LOCATE 15, 10
1722 PRINT "TEMPERATURE OF PIZZA ENTERING OVEN (inCelcius): "
1730 LOCATE 7, 41, 1, 0, 7
1740 INPUT .", initialDoughWeight
1750 LOCATE 7, 41
1760 PRINT
1770 LOCATE 7, 41
1780 PRINT initialDoughWeight
1790 LOCATE 9, 37, 1, 0, 7
1800 INPUT .., initialTomatoWeight
1810 LOCATE 9, 37
1820 PRINT
1830 LOCATE 9, 37
1840 PRINT initialTomatoWeight
1850 LOCATE 11, 42, 1, 0, 7
1860 INPUT "", initialOilWeight
1870 LOCATE 11, 42
1880 PRINT
1890 LOCATE 11, 42
1900 PRINT initialOilWeight
1910 LOCATE 13, 46, 1, 0, 7
1920 INPUT .", initialDoughThickness
1930 LOCATE 13, 46
1940 PRINT
1950 LOCATE 13, 46
1960 PRINT initialDoughThickness
1961 LOCATE 15, 58, 1, 0, 7
1962 INPUT .", pizzaTemperatureBeforeBaking
1963 LOCATE 15, 58
1964 PRINT
1965 LOCATE 15, 58
1966 PRINT pizzaTemperatureBeforeBaking
1970 CLS 2
1980 LOCATE 5, 5
1990 PRINT "POST BAKING CONDITIONS"
2000 LOCATE 7, 10
2010 PRINT "WEIGHT OF OIL IN PAN (in grams):
2020 LOCATE 9, 10
2030 PRINT "WEIGHT OF SHELL AND SAUCE (ingrams): ,_
2040 LOCATE 11, 10
2050 PRINT "WEIGHT OF WATER FROM TOPPINGS (ingrams): "
2060 LOCATE 13, 10
2070 PRINT "THICKNESS OF SHELL (inmillimeters):_ _
2080 LOCATE 15, 10
2090 PRINT "THICKNESS OF CRUST (inmillimeters): "
2091 LOCATE 17, 10
2092 PRINT "FINAL SAUCE TEMPERATURE (inCelcius): "
2100 LOCATE 7, 42, 1, 0, 7
2110 INPUT .", finalOilWeight
2120 LOCATE 7, 42
2130 PRINT2140 LOCATE 7, 42
2150 PRINT finalOilWeight
2160 LOCATE 9, 47, 1, 0, 7
2170 INPUT "", bakedShellAndTomatoWeight
2180 LOCATE 9, 47
2190 PRINT
2200 LOCATE 9, 47
2210 PRINT bakedShellAndTomatoWeight
2220 LOCATE 11, 51, 1, 0, 7
2230 INPUT "", moistureAbsorbedFromToppingsByShellWeight
2240 LOCATE 11, 51
2250 PRINT .
2260 LOCATE 11, 51
2270 PRINT moistureAbsorbedFromToppingsByShellWeight
2280 LOCATE 13, 46, 1, 0, 7
2290 INPUT "', finalShellThickness
2300 LOCATE 13, 46
2310 PRINT ...
2320 LOCATE 13, 46
2330 PRINT finalShellThickness
2340 LOCATE 15, 46, 1, 0, 7
2350 INPUT "", finalCrustThickness
2360 LOCATE 15, 46
2370 PRINT ...
2380 LOCATE 15, 46
2390 PRINT finalCrustThickness
2400 LOCATE 17, 47, 1, 0, 7
2410 INPUT "", finalTemperatureShellTop
2420 LOCATE 17, 47
2430 PRINT
2440 LOCATE 17, 47
2450 PRINT finalTemperatureShellTop
2460 CLS 2
2470 LOCATE 5, 5
2480 PRINT "BAKING CONDITIONS"
2490 LOCATE 7, 10
2500 PRINT "PAN THICKNESS (in millimeters):
2510 LOCATE 9, 10
2520 PRINT "PAN DIAMETER (in millimeters):
2522 LOCATE 11, 10
2524 PRINT "PAN DENSITY (in kg/m"; CHR$(94); -3): "
2530 LOCATE 13, 10
2540 PRINT "PAN CONDUCTIVITY (in watts/meterKelvin):
2542 LOCATE 15, 10
2544 PRINT "PAN SPECIFIC HEAT (in J/kg K):
2550 LOCATE 17, 10
2560 PRINT "EMISSIVITY OF PAN:
2570 LOCATE 19, 10
2580 PRINT "TOTAL COOKING TIME (in seconds):
2590 LOCATE 21, 10
2600 PRINT "NUMBER OF COOKING ZONES IN OVEN:
2610 LOCATE 7, 41, 1, 0, 7
2620 INPUT "", panThickness
2630 LOCATE 7, 41
2640 PRINT "...
2650 LOCATE 7, 41
2660 PRINT panThickness
2670 LOCATE 9, 40, 1, 0, 7
2680 INPUT "", panDiameter
2690 LOCATE 9, 40
2700 PRINT ...
2710 LOCATE 9, 40
2720 PRINT panDiameter
2722 LOCATE 11, 34, 1, 0, 7
2724 INPUT "", panDensity
2726 LOCATE 11, 34
2727 PRINT
2728 LOCATE 11, 34
2729 PRINT panDensity
2730 LOCATE 13, 51, 1, 0, 7
2740 INPUT "", patThermalConductivity
2750 LOCATE 13, 51
2760 PRINT
2770 LOCATE 13, 51
2780 PRINT patThermalConductivity
2781 LOCATE 15, 40, 1, 0, 7
2782 INPUT "", panSpecificHeat
2783 LOCATE 15, 40
2784 PRINT ...
2785 LOCATE 15, 40
2786 PRINT panSpecificHeat
2790 LOCATE 17, 28, 1, 0, 7
2800 INPUT "", panEmissivity
2810 LOCATE 17, 28
2820 PRINT "
2830 LOCATE 17, 28
2840 PRINT panEmissivity
2850 LOCATE 19, 42, 1, 0, 7
2860 INPUT ", totalCookingTime
2870 LOCATE 19, 42
2880 PRINT
2890 LOCATE 19, 42
2900 PRINT totalCookingTime
2910 LOCATE 21, 42, 1, 0, 7
2920 INPUT "", ovenCookingZones
2930 LOCATE 21, 42
2940 PRINT
2950 LOCATE 21, 42
2960 PRINT ovenCookingZones
2970 CLS 2
2980 LOCATE 5, 5
2990 PRINT " IS THE CONVECTIVE HEAT TRANSFER COEFFICIENTFOR EACH ZONE KNOWN (Y/N)?"
3000 SELECTS = INPUT$(I)
3100 IF SELECTS = CHR$(89) THEN
	3110 GOTO 3180
3115 ELSEIF SELECTS = CHR$(121) THEN
	3120 GOTO 3180
3125 ELSEIF SELECTS = CHR$(78) THEN
	3130 GOTO 3560
3135 ELSEIF SELECTS = CHR$(110) THEN
	3140 GOTO 3560
3150 ELSE
	3160 GOTO 2970
END IF
3180 double[] ovenTemperatureZone = new double[ovenCookingZones];
double[] ovenZoneLength = new double[ovenCookingZones];
double[] convectiveHeatTransferCoefficientCookingZone = new double[ovenCookingZones];
int m = 0
CLS 2
for(int index = 0; index < ovenCookingZones; index ++){
	m ++;
	3250 LOCATE 5 + (m - 1) * 5, 5
	3260 PRINT "ZONE:", index
	3270 LOCATE 6 + (m - 1) * 5, 10
	3280 PRINT "TEMPERATURE (C):_ _
	3290 LOCATE 6 + (m - 1) * 5, 26, 1, 0, 7
	3300 INPUT "", ovenTemperatureZone[index]
	3310 LOCATE 6 + (m - 1) * 5, 26
	3320 PRINT
	3330 LOCATE 6 + (m - 1) * 5, 26
	3340 PRINT ovenTemperatureZone[index]
	3350 LOCATE 7 + (m - 1) * 5, 10
	3360 PRINT "ovenTotalLength (mm): "
	3370 LOCATE 7 + (m - 1) * 5, 22, 1, 0, 7
	3380 INPUT "", ovenZoneLength[index]
	3390 LOCATE 7 + (m - 1) * 5, 22
	3400 PRINT ...
	3410 LOCATE 7 + (m - 1) * 5, 22
	3420 PRINT ovenZoneLength[index]
	3430 LOCATE 8 + (m - 1) * 5, 10
	3440 PRINT "CONVECTIVE HEAT TRANSFER COEFFICIENT (W/m";CHR$(94); "2 C): "
	3450 LOCATE 8 + (m - 1) * 5, 57, 1, 0, 7
	3460 INPUT "", convectiveHeatTransferCoefficientCookingZone[index]
	3470 LOCATE 8 + (m - 1) * 5, 57
	3480 PRINT
	3490 LOCATE 8 + (m - 1) * 5, 57
	3500 PRINT convectiveHeatTransferCoefficientCookingZone[index]
	IF m = 4 THEN
		m = 0;
		CLS 2
	END IF
}
GOTO 3960
3560 double[] ovenTemperatureZone = new double[ovenCookingZones];
double[] ovenZoneLength = new double[ovenCookingZones];
double[] convectiveHeatTransferCoefficientCookingZone = new double[ovenCookingZones];
double[] ZONES = new double[ovenCookingZones];
m = 0;
CLS 2
for(int index = 0; index < ovenCookingZones; index ++){
	m ++;
	3640 LOCATE 5 + (m - 1) * 5, 5
	3650 PRINT "ZONE:", index
	3660 LOCATE 6 + (m - 1) * 5, 10
	3670 PRINT "TEMPERATURE (C):_ _
	3680 LOCATE 6 + (m - 1) * 5, 26, 1, 0, 7
	3690 INPUT "", ovenTemperatureZone[index]
	3700 LOCATE 6 + (m - 1) * 5, 26
	3710 PRINT
	3720 LOCATE 6 + (m - 1) * 5, 26
	3730 PRINT ovenTemperatureZone[index]
	3740 LOCATE 7 + (m - 1) * 5, 10
	3750 PRINT "ovenTotalLength (mm):
	3760 LOCATE 7 + (m - 1) * 5, 22, 1, 0, 7
	3770 INPUT "", ovenZoneLength[index]
	3780 LOCATE 7 + (m - 1) * 5, 22
	3790 PRINT ...
	3800 LOCATE 7 + (m - 1) * 5, 22
	3810 PRINT ovenZoneLength[index]
	3820 LOCATE 8 + (m - 1) * 5, 10
	3830 PRINT "AIR SPEED IN THE OVEN (m/s):_"
	3840 LOCATE 8 + (m - 1) * 5, 38, 1, 0, 7
	3850 INPUT "", ZONES(index)
	3860 LOCATE 8 + (m - 1) * 5, 38
	3870 PRINT
	3880 LOCATE 8 + (m - 1) * 5, 38
	3890 PRINT ZONES(index)
	3900 convectiveHeatTransferCoefficientCookingZone[index] = convectiveHeatTransferCoefficient(ZONES(index), ovenTemperatureZone[index], AIR(), panDiameter)
	3910 IF m = 4 THEN
		3920 m = 0
		3930 CLS 2
	3940 END IF
}
3960 CLS 2
3970 LOCATE 5, 5
3980 PRINT "ESTIMATE FOR THE EFFECTIVE DIFFUSIVITY
3990 LOCATE 6, 5
4000 PRINT "FOR THE CRUST (cm"; CHR$(94);"2/s):.
4010 LOCATE 6, 28, 1, 0, 7
4020 INPUT crustEffectiveDiffusivity
4030 LOCATE 6, 28
4040 PRINT
4050 LOCATE 6, 28
4060 PRINT crustEffectiveDiffusivity
4070 LOCATE 10, 5
LOGGER.log("The finished shell thickness is {} mm", finalShellThickness);
4090 LOCATE 11, 5, 1, 0, 7
4100 PRINT "HOW MANY SECTION IS IT TO BE DIVIDED INTO?
4110 LOCATE 11, 48
4120 INPUT "", shellNodes
4130 LOCATE 11, 48
4140 PRINT "
4150 LOCATE 11, 48
4160 PRINT shellNodes

shellNodes ++;
initialDoughThicknessOverFinalDoughThickness = initialDoughThickness / finalShellThickness;
doughSliceThickness = (finalShellThickness / 1000.) / (shellNodes - 1);
double[][] doughComponent = new double[6][shellNodes];
double[][] doughTemperature = new double[2][shellNodes];
for(int index = 0; index < shellNodes; index ++){
	doughComponent[0][index] = initialDoughProtein;
	doughComponent[1][index] = initialDoughFat;
	doughComponent[2][index] = initialDoughCarbohydrate;
	doughComponent[3][index] = initialDoughFiber;
	doughComponent[4][index] = initialDoughAsh;
	doughComponent[5][index] = initialDoughMoisture;
	doughTemperature[0][index] = pizzaTemperatureBeforeBaking;
}
outsidePanTemperatureAtT = pizzaTemperatureBeforeBaking;
insidePanTemperatureAtT = pizzaTemperatureBeforeBaking;
initialDoughVolume = (initialDoughThickness / 1000.) * Math.PI * Math.pow(panDiameter / 2000., 2.);
finalCrustVolume = (finalCrustThickness / 1000.) * Math.PI * Math.pow(panDiameter / 2000., 2.);
//[%]
doughVoidSpace = (initialDoughVolume - ((initialDoughWeight / 1000.) / doughDensity(pizzaTemperatureBeforeBaking, doughComponent(), 0))) / initialDoughVolume;
totalMoistureLossDuringCooking = initialDoughWeight - bakedShellAndTomatoWeight + moistureAbsorbedFromToppingsByShellWeight + initialTomatoWeight * initialTomatoMoistureContent - (initialOilWeight - finalOilWeight);
initialCrustMoisture = finalCrustVolume * (initialDoughWeight / (initialDoughVolume * (1. - doughVoidSpace)) * initialDoughMoisture;
initialCrustProtein = finalCrustVolume * (initialDoughWeight / (initialDoughVolume * (1. - doughVoidSpace))) * initialDoughProtein;
initialCrustFat = finalCrustVolume * (initialDoughWeight / (initialDoughVolume * (1. - doughVoidSpace)) * initialDoughFat;
initialCrustCarbohydrates = finalCrustVolume * (initialDoughWeight /(initialDoughVolume * (1. - doughVoidSpace)) * initialDoughCarbohydrate;
initialCrustFiber = finalCrustVolume * (initialDoughWeight /(initialDoughVolume * (1. - doughVoidSpace))) * initialDoughFiber;
initialCrustAsh = finalCrustVolume * (initialDoughWeight / (initialDoughVolume * (1. - doughVoidSpace))) * initialDoughAsh;
finalCrustMoisture = initialCrustMoisture - totalMoistureLossDuringCooking;
finalCrustFat = initialCrustFat + (initialOilWeight - finalOilWeight);
//[%]
finalCrustMoisturePercent = finalCrustMoisture / (finalCrustMoisture + finalCrustFat + initialCrustProtein + initialCrustCarbohydrates + initialCrustFiber + initialCrustAsh);
//[%]
finalCrustFatPercent = finalCrustFat / (finalCrustMoisture + finalCrustFat + initialCrustProtein + initialCrustCarbohydrates + initialCrustFiber + initialCrustAsh);
//[%]
finalCrustProteinPercent = initialCrustProtein / (finalCrustMoisture + finalCrustFat + initialCrustProtein + initialCrustCarbohydrates + initialCrustFiber + initialCrustAsh);
//[%]
finalCrustCarbohydratesPercent = initialCrustCarbohydrates / (finalCrustMoisture + finalCrustFat + initialCrustProtein + initialCrustCarbohydrates + initialCrustFiber + initialCrustAsh);
//[%]
finalCrustFiberPercent = initialCrustFiber (finalCrustMoisture + finalCrustFat + initialCrustProtein + initialCrustCarbohydrates + initialCrustFiber + initialCrustAsh);
//[%]
finalCrustAshPercent = initialCrustAsh / (finalCrustMoisture + finalCrustFat + initialCrustProtein + initialCrustCarbohydrates + initialCrustFiber + initialCrustAsh);
//[%]
double[] oil = new double[6];
oil[1] = 1.;
//moisture in slice of dough at node `index`
double[] moistureContent = new double[shellNodes];
for(int index = 0; index < shellNodes; index ++)
	moistureContent[index] = (index == 0 || index == shellNodes - 1? initialMoistureContent / 2.: initialMoistureContent);
//steam in void of dough slice `index`
double[] steamInVoid = new double[shellNodes];
//initial moisture content in a slice of dough
initialMoistureContent = ((initialDoughWeight / 1000.) / initialDoughVolume) * (1. - doughVoidSpace) * (doughSliceThickness * initialDoughThicknessOverFinalDoughThickness) * initialDoughMoisture
oilAbsorbedByCrustInDT = ((initialOilWeight - finalOilWeight) / 1000.) / (BOTH / 1000.) * doughSliceThickness;
//moisture in slice of dough once it becomes crust
moistureContentCrust = initialMoistureContent - ((totalMoistureLossDuringCooking / 1000.) / (BOTH / 1000.) * doughSliceThickness);
//mass of steam that fills the voids in the a slice of dough
steamMass = 0.5228 * doughSliceThickness;
double ovenTotalLength = 0.
for(int index = 0; index < ovenCookingZones; index ++)
	ovenTotalLength += ovenZoneLength[index];
beltSpeed = totalCookingTime / ovenTotalLength;
5050 cookingTime = 0.;
doughSlicesExperiencingMoistureLoss = 1;
totalMoistureLossAtTimeT = 0.;
//mass of oil in pan at time t
oilInPan = initialOilWeight / 1000.;
//excess heat due to steam condensation passed to next dough slice
excessHeat = 0.;
outsidePanTemperatureAtT = pizzaTemperatureBeforeBaking;
insidePanTemperatureAtT = pizzaTemperatureBeforeBaking;
for(int cookingTime = 0; cookingTime < totalCookingTime; cookingTime ++){
	lengthTraveledThroughAtTimeT = 0.;
	for(int index = 0; index < ovenCookingZones; index ++){
		lengthTraveledThroughAtTimeT += ovenZoneLength[index];
		if(cookingTime <= lengthTraveledThroughAtTimeT * beltSpeed){
			Zh = convectiveHeatTransferCoefficientCookingZone[index];
			ZONETEMP = ovenTemperatureZone[index];
			break;
		}
	}
	outsidePanTemperatureAtTPlusDT = outsidePanTemperatureAtT + ((Zh * (ZONETEMP - outsidePanTemperatureAtT) - ((patThermalConductivity / (panThickness / 1000.)) * (outsidePanTemperatureAtT - insidePanTemperatureAtT)) + (panEmissivity * 5.67e-8 * (Math.pow(ZONETEMP + ABSOLUTE_ZERO, 4.) - Math.pow(outsidePanTemperatureAtT + ABSOLUTE_ZERO, 4.)))) * (2. / ((panThickness / 1000.) * panDensity * panSpecificHeat))
	5370 OILT = (insidePanTemperatureAtT + doughTemperature[0][0]) / 2.
	5380 OILD = doughDensity(OILT, oil, 0);
	5390 OILTH = (oilInPan / OILD) / (Math.PI * Math.pow(panDiameter / 2000., 2.))
	5395 IF OILTH <= 0 THEN
		5396 crustEffectiveDiffusivity *= 2.;
		5397 break;
	5398 END IF
	//inside pan temperature at time t plus delta t
	insidePanTemperatureAtTPlusDT = insidePanTemperatureAtT + ((patThermalConductivity / (panThickness / 1000.) * (outsidePanTemperatureAtT - insidePanTemperatureAtT) -KOILT, OILO, 1) / OILTH) * (insidePanTemperatureAtT - doughTemperature[0][0])) / ((panThickness / 1000.) * panDensity * panSpecificHeat + (OILTH /2) * OILD * doughSpecificHeat(OILT, oil, 0));
	if(doughTemperature[0][0] < 100.){
		KOIL = doughConductivity(OILT, oil, 0);
		SPOIL = doughSpecificHeat(OILT, oil, 0);
		doughDensity = doughDensity(doughTemperature[0][0], doughComponent(), 0) * (1. - doughVoidSpace);
		doughThermalConductivity = doughConductivity(doughTemperature[0][0], doughComponent(), 0) * (1. - doughVoidSpace) * doughConductivityCorrectionFactor;
		doughSpecificHeat = doughSpecificHeat(doughTemperature[0][0], doughComponent(), 0) * (1. - doughVoidSpace);
		doughTemperature[1][0] = ((KOIL / OILTH) * (insidePanTemperatureAtT - doughTemperature[0][0]) - (doughThermalConductivity / (doughSliceThickness * initialDoughThicknessOverFinalDoughThickness)) * (doughTemperature[0][0] - doughTemperature[0][1])) / (((doughSliceThickness * initialDoughThicknessOverFinalDoughThickness) / 2.) * doughDensity * doughSpecificHeat);
	}
	else
		excessHeat = 0.
	5490 IF doughTemperature[1][0] > 100. THEN
		5500 heat = (doughTemperature[1][0] - 100.) * ((doughSliceThickness * initialDoughThicknessOverFinalDoughThickness) / 2.) * doughDensity * doughSpecificHeat
		5510 doughTemperature[1][0] = 1005530. MSP = heat / 2444900.
		5540 IF (MSP + steamInVoid[0]) > steamMass THEN
			5550 IF (moistureContent[0] - (MSP + steamInVoid[0] - steamMass)) < moistureContentCrust THEN
				excessHeat = (moistureContentCrust - (moistureContent[0] - (MSP + steamInVoid[0] - steamMass))) 2444900.;
				totalMoistureLossAtTimeT += moistureContent[0] - moistureContentCrust
				moistureContent[0] = moistureContentCrust
				oilInPan -= oilAbsorbedByCrustInDT / 2.;
				doughSlicesExperiencingMoistureLoss = 2.;
				doughComponent(1, 1) = finalCrustProteinPercent
				doughComponent(2, 1) = finalCrustFatPercent
				doughComponent(3, 1) = finalCrustCarbohydratesPercent
				doughComponent(4, 1) = finalCrustFiberPercent
				doughComponent(5, 1) = finalCrustAshPercent
				doughComponent(6, 1) = finalCrustMoisturePercent
			ELSE
				PCMC = (moistureContent[0] - (MSP + steamInVoid[0] - steamMass)) / moistureContent[0]
				totalMoistureLossAtTimeT += MSP + steamInVoid[0] - steamMass
				moistureContent[0] -= MSP + steamInVoid[0] - steamMass
				rescale(PCMC, doughComponent(), 0);
				steamInVoid[0] = steamMass
				excessHeat = 0.;
			END IF
		ELSE
			steamInVoid[0] += MSP
			excessHeat = 0.;
		END IF
	END IF
	5780 IF doughTemperature[0][0] = 100. THEN
		5790 KOIL = doughConductivity(OILT, oil, 0);
		5800 SPOIL = doughSpecificHeat(OILT, oil, 0);
		5810 doughDensity = doughDensity(doughTemperature[0][0], doughComponent(), 0) * (1. - doughVoidSpace)
		5820 doughThermalConductivity = doughConductivity(doughTemperature[0][0], doughComponent(), 0) * (1. - doughVoidSpace) * doughConductivityCorrectionFactor
		5830 doughSpecificHeat = doughSpecificHeat(doughTemperature[0][0], doughComponent(), 0) * (1. - doughVoidSpace)
		5840 doughTemperature[1][0] = ((KOIL / OILTH) * (insidePanTemperatureAtT - doughTemperature[0][0]) - (doughThermalConductivity /(doughSliceThickness * initialDoughThicknessOverFinalDoughThickness)) * (doughTemperature[0][0] - doughTemperature[0][1])) / (((doughSliceThickness * initialDoughThicknessOverFinalDoughThickness) / 2.) * doughDensity * doughSpecificHeat)
		5850 IF moistureContent[0] > moistureContentCrust THEN
			5870 heat = (doughTemperature[1][0] - 100.) *((doughSliceThickness * initialDoughThicknessOverFinalDoughThickness) /2) * doughDensity * doughSpecificHeat
			5880 doughTemperature[1][0] = 100.;
			5900 MSP = heat / 2444900.
			6000 IF MSP + steamInVoid[0] > steamMass THEN
				6010 IF (moistureContent[0] - (MSP + steamInVoid[0] - steamMass)) < moistureContentCrust THEN
					excessHeat = (moistureContentCrust - (moistureContent[0] - (MSP + steamInVoid[0] - SF)) 2444900.;
					totalMoistureLossAtTimeT += moistureContent[0] - moistureContentCrust
					moistureContent[0] = moistureContentCrust
					oilInPan -= oilAbsorbedByCrustInDT / 2.;
					doughSlicesExperiencingMoistureLoss = 2
					doughComponent(1, 1) = finalCrustProteinPercent
					doughComponent(2, 1) = finalCrustFatPercent
					doughComponent(3, 1) = finalCrustCarbohydratesPercent
					doughComponent(4, 1) = finalCrustFiberPercent
					doughComponent(5, 1) = finalCrustAshPercent
					doughComponent(6, 1) = finalCrustMoisturePercent
				6130 ELSE
					6140 PCMC = (moistureContent[0] - (MSP + steamInVoid[0] -NSF)) / CDV(1)
					6150 totalMoistureLossAtTimeT += MSP + steamInVoid[0] - NSF)
					6160 moistureContent[0] -= MSP + steamInVoid[0] -NSF
					rescale(PCMC, doughComponent(), 0);
					6180 steamInVoid[0] = steamMass
					6185 excessHeat = 0.;
				6190 END IF
			6200 ELSE
				6210 steamInVoid[0] = MSP
				6215 excessHeat = 0.;
			6220 END IF
		6225 ELSE
			6226 excessHeat = 0.;
		6230 END IF
	6240 END IF
	6250 FORM = 1 TO shellNodes -1
	6260 totalMoistureLossAtTimeT = m - 1
	6270 M2 = m + 1
	6290 doughDensity = doughDensity(doughTemperature[0][m], doughComponent(), m) * (1. - doughVoidSpace)
	6300 doughThermalConductivity = doughConductivity(doughTemperature[0][m], doughComponent(), m) * (1. - doughVoidSpace) * doughConductivityCorrectionFactor
	6310 doughSpecificHeat = doughSpecificHeat(doughTemperature[0][m], doughComponent(), m) * (1. - doughVoidSpace)
	6320 doughTemperature[1][m] = doughTemperature[0][m] + ((doughThermalConductivity / (doughSliceThickness * initialDoughThicknessOverFinalDoughThickness)) * (doughTemperature[0][M1] + doughTemperature[0][M2] - 2. * doughTemperature[0][m]) + excessHeat) / ((doughSliceThickness * initialDoughThicknessOverFinalDoughThickness) * doughDensity * doughSpecificHeat)
	6330 IF doughSlicesExperiencingMoistureLoss <> m THEN
		6340 IF doughTemperature[1][m] > 100. THEN
			6350 heat = (doughTemperature[1][m] - 100.) * doughSliceThickness * doughDensity * doughSpecificHeat
			6360 doughTemperature[1][m] = 100.
			6370 MSP = heat / 2444900.
			6380 IF (MSP + NSIV(m)) > steamMass THEN
				6390 excessHeat = ((MSP + steamInVoid[m]) - steamMass) * 2444900.;
				6400 steamInVoid[m] = steamMass
			6410 ELSE
				6420 excessHeat = 0.;
				6430 NSIV(m) = steamInVoid[m] +MSP
			6440 END IF
		6450 ELSE
			6460 excessHeat = 0.;
		6470 END IF
	6480 ELSE
		6490 IF doughTemperature[1][m] > 100. THEN
			heat = (doughTemperature[1][m] - 100.) * doughSliceThickness * doughDensity * doughSpecificHeat;
			doughTemperature[1][m] = 100.;
			MSP = heat / 2444900.;
			if(MSP + steamInVoid[m] > steamMass){
				//moisture lost from slice
				sliceMoistureLost = crustEffectiveDiffusivity(steamInVoid[H] + MSP) / (doughSliceThickness * (m - 1)) 2
				if(moistureContent[m] - sliceMoistureLost < moistureContentCrust){
					sliceMoistureLost = moistureContent[m] - moistureContentCrust
					totalMoistureLossAtTimeT += sliceMoistureLost
					moistureContent[m] = moistureContentCrust
					doughSlicesExperiencingMoistureLoss ++;
					doughComponent(1, m) = finalCrustProteinPercent
					doughComponent(2, m) = finalCrustFatPercent
					doughComponent(3, m) = finalCrustCarbohydratesPercent
					doughComponent(4, m) = finalCrustFiberPercent
					doughComponent(5, m) = finalCrustAshPercent
					doughComponent(6, m) = finalCrustMoisturePercent
					doughTemperature[1][m] = 100.
					excessHeat = (HSIV(m) + MSP - sliceMoistureLost - steamMass) * 2444900.;
					oilInPan -= oilAbsorbedByCrustInDT;
					steamInVoid[m] = steamMass;
				}
				else{
					totalMoistureLossAtTimeT +/-?= sliceMoistureLost
					PCMC = (moistureContent[m] - (MSP + steamInVoid[m] - steamMass)) / moistureContent[m];
					moistureContent[m] -= sliceMoistureLost
					excessHeat = (MSP+ steamInVoid[m] - steamMass - sliceMoistureLost) * 2444900.;
					steamInVoid[m] = steamMass
					rescale(PCMC, doughComponent(), m);
				}
			else
				steamInVoid[m] = steamInVoid[m] +/-? MSP
			}
		6810 ELSE
			6820 excessHeat = 0.;
		6830 END IF
	6840 END IF
}
doughDensity = doughDensity(doughTemperature[0][shellNodes], doughComponent(), shellNodes - 1) * (1. - doughVoidSpace);
doughThermalConductivity = doughConductivity(doughTemperature[0][shellNodes], doughComponent(), shellNodes - 1) * (1. - doughVoidSpace) * doughConductivityCorrectionFactor;
doughSpecificHeat = doughSpecificHeat(doughTemperature[0][shellNodes], doughComponent(), shellNodes - 1) * (1. - doughVoidSpace);
6885 index = shellNodes - 1;
doughTemperature[1][shellNodes] = doughTemperature[0][shellNodes] + (doughThermalConductivity / (doughSliceThickness * initialDoughThicknessOverFinalDoughThickness)) * (doughTemperature[0][index] - doughTemperature[0][shellNodes]) / (doughSliceThickness * initialDoughThicknessOverFinalDoughThickness * doughDensity * doughSpecificHeat);
excessHeat = 0.;
for(int index = 0; index < shellNodes; index ++)
	doughTemperature[0][index] = doughTemperature[1][index];
outsidePanTemperatureAtT = outsidePanTemperatureAtTPlusDT;
insidePanTemperatureAtT = insidePanTemperatureAtTPlusDT;
6925 NEXT
totalMoistureLossAtTimeT *= Math.PI * Math.pow(panDiameter / 2000., 2.);
if(Math.abs(NL - totalMoistureLossDuringCooking) / totalMoistureLossDuringCooking > 0.01){
	crustEffectiveDiffusivity *= totalMoistureLossDuringCooking / totalMoistureLossAtTimeT;
	LOGGER.log("Calculated moisture content: {}%, Calculated final temperature: {} °C", totalMoistureLossAtTimeT, doughTemperature[0][shellNodes]);
	GOTO 5050
}
if(Math.abs(doughTemperature[0][shellNodes] - finalTemperatureShellTop) / finalTemperatureShellTop > 0.01){
	doughConductivityCorrectionFactor = finalTemperatureShellTop / doughTemperature[0][shellNodes];
	GOTO 5050
}
CLS 2
GOTO 99999
10000 CLS
PRINT "PROGRAM NOT READY"
99999 PRINT "PROGRAM TERMINATED"
